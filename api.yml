openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: http://localhost:8080/api/v1
    description: localhost
  - url: https://dev.juno.nponsard.net/api/v1
    description: dev server
  - url: https://tournament.juno.nponsard.net/api/v1
    description: prod server

paths:
  /users/me:
    get:
      summary: Get current user info
      tags:
        - users
      security:
        - jwt: []

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      description: Update user info/password, must be the user himself, different from PATCH /user/{id} as it requires the confirmation of the old password and you canâ€™t edit the admin property
      tags:
        - "users"
      security:
        - jwt: []
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  description: Old password
                newPassword:
                  type: string
                  description: New password
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/{id}/teams:
    get:
      summary: Get teams the user participates in
      tags:
        - "users"
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  admin:
                    type: boolean
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /users/{id}:
    get:
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  admin:
                    type: boolean
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

    patch:
      description: Update user info/password, must be admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      tags:
        - "users"
      security:
        - jwt: []
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  nullable: true
                  type: string
                admin:
                  nullable: true
                  type: boolean
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"

        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      description: Delete a user, the user doing the request must be an admin or the user to delete
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"

        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/register:
    post:
      tags:
        - "users"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/login:
    post:
      tags:
        - "users"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          description: Invalid password/username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /users/logout:
    post:
      description: Logout the user and revoke the token and refresh token
      tags:
        - "users"
      security:
        - jwt: []
      responses:
        "200":
          description: Logout successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tokens/refresh:
    post:
      tags:
        - "tokens"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /teams:
    get:
      summary: Get all teams
      tags:
        - "teams"
      responses:
        "200":
          description: Teams found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/team"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      description: Create a new team, the user doing the request is automatically added to the team as captain
      tags:
        - "teams"
      security:
        - jwt: []
      requestBody:
        description: Team info
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}:
    get:
      summary: Get info about a team
      tags:
        - "teams"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Team found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update a team info
      description: Update a team info, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Team info
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Team updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete a team
      description: Delete a team, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Team deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}/users:
    get:
      summary: Get all players of a team
      tags:
        - "teams"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    put:
      summary: Add a player to a team
      description: Add a player to a team, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                role:
                  type: integer
                  description: 1 = captain, 0 = player
      responses:
        "200":
          description: User added to team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}/users/{userId}:
    delete:
      summary: Remove a player from a team
      description: Remove a player from a team, the user doing the action must be admin, captain of the team or the player to remove
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User removed from team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /matches:
    get:
      summary: Get all matches
      tags:
        - "matches"
      responses:
        "200":
          description: Matches found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      summary: Create a match
      description: Create a match, if tournament_id is specified, the user must be a tournament organizer or an admin and must specify the row and column of the match
      tags:
        - "matches"
      security:
        - jwt: []
      requestBody:
        description: Match info
        content:
          application/json:
            schema:
              type: object
              properties:
                team1:
                  type: integer
                team2:
                  type: integer
                date:
                  type: string
                tournament_id:
                  type: integer
                  nullable: true
                row:
                  type: integer
                  nullable: true
                column:
                  type: integer
                  nullable: true
                
      responses:
        "200":
          description: Match created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: JWT token
  responses:
    "400BadRequest":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"

    "401Unauthorized":
      description: Invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
    "403Forbidden":
      description: not enough permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
    "500InternalServerError":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
  schemas:
    message:
      type: object
      description: object containing a message
      properties:
        message:
          type: string
    user:
      type: object
      description: User object
      properties:
        id:
          type: integer
        username:
          type: string
    team:
      type: object
      description: Team object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        win_count:
          type: integer
        match_count:
          type: integer
    match:
      type: object
      description: Match object
      properties:
        id:
          type: integer
        team_1_id:
          type: integer
        team_2_id:
          type: integer
        row:
          type: integer
        column:
          type: integer
        tournament_id:
          type: integer
          nullable: true
        winner_id:
          type: integer
          nullable: true
        date:
          type: number
      
tags:
  - name: users
    description: User management
  - name: tournaments
    description: Tournament management
  - name: tokens
    description: Token management
  - name: teams
    description: Team management
  - name: matches
    description: Match management
  # - name: games
  # description: Game management
